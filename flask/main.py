from flask import Flask, render_template, Response, request
from multiprocessing import Process, Queue
import socketClient as SocketCli

app = Flask(__name__)


@app.route('/')
def index():
    return render_template("index.html")

@app.route('/anomalyDetection')
def anomalyDetection():
    return render_template("anomalyDetection.html")

@app.route('/liveStreaming')
def liveStreaming():
    return render_template("liveStreaming.html")

@app.route('/liveCam01')
def liveCam01():
    return Response(getLiveCam01(), mimetype='multipart/x-mixed-replace; boundary=frame')

def getLiveCam01():
    while True:
        if imgQueue1.qsize() != 0:
            yield(b'--frame\r\n'
                  b'Content-Type: image/jpeg\r\n\r\n' + imgQueue1.get() + b'\r\n')
        else :
            yield(b'--frame\r\n'
                  b'Content-Type: image/png\r\n\r\n' + "iVBORw0KGgoAAAANSUhEUgAAAWgAAAHgCAIAAAAHZGA3AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABFLSURBVHhe7d3Zj1TF2wBgSOQC+BASA2gmMaCoiWDgQsSERNFIRIwGRTFG5BK4U7wTBTcQEsMybghIZFHjAhFBEJU/7nszVdSv7NN9phtnhee5IN116qxz3rffqjM9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABrR06dI333xzeHh4y5YtuQmgaebMmcuXL9+xY8e5c+eujzh27NjRo0fzYoDijjvuWL169a5du3799deUL5ILFy78M+Kuu+7KXYHb3OzZs5988sndu3dfunQpp4pKFB2HDh1Krzdt2pTXAW5P8+fPf+655/bs2fPnn3+mvFA7fvz4m2++uXTp0oceeujHH39MjYcPH84rA7eVxYsXR+EQKSCGHj/88EPKCEm0HDlyZPPmzXfffXfuPWPGwYMH06L074IFC/IC4JYXtcPWrVu/+eaba9euXbx4cSRRXP/uu+/i32jZv39/VB/NpLBy5crUs3jhhRfyMuCWlB6ObN++/ezZsznur1//+uuv04vTp0+///7769atmz17dl6hYXh4OHUuPvvss7wMuJXccccdjz766Ntvv/3LL7/kcL/hzz//jMbIHWfOnHn88cfzCj2sWbMmr1b5+++/582bl3sA092cOXOeeOKJlocjO3fujBIjvR11mjOqlePHj6fOHWJQkzsB09T8+fM3bNiwb9++L7/8Mkd2JYJ/27Zt9913X/RcuHDh1atXU/uKFSvS6r3EECbKkwsXLqT+tYMHD+ZOwPSyaNGil19+ec+ePel5x8WLF2MQkQI7Wo4ePfrKK6/UD0dCDF5ShwMHDuSmbmKtLVu2xHAmbbkWLVGqvPjii7krMC0sWbJk69atx44dizCOIcm1a9dSSKfHJfv379+4cWPXJ6ZDQ0Mlsyxbtiy3VtJ3UtLw5OTJk6lnEqVHVDQxQonqJvcGpriZM2c+/PDD27dvP3PmTA7lESl9XL58eXh4+JlnnpkzZ05eoZvdu3entaJIyU3dvpOSpF85j8QUaz355JMtj12AqSU9HHnrrbeaD0fCzz//nB6OxOtRf7ci6pQ07oii49577501a1bX76Qkn3/+eQxqokMcQF4fmOLSN0fefffd33//PYdy5fvvv9+5c+cjjzzywQcfpJazZ8+OGuEff/xx9IzcESOO9957r+tjl9hOFDVRgEQZklcDprg777xzw4YNn3zyydWrV7/99tsczTecOHFi27Zt999/f+q8bNmyvOD69fXr16fGXlatWnX8+PHYwpUrV5opIxZt3bp16dKluTcw9S1atOill146dOhQeYRRvlEWLUePHn311Vfvueee3PuGAwcOpD6nTp3qVSAsXrx48+bNR44cKWmo/M5obLn5nRRgqluyZMkbb7yRZjc7nDx58tNPP+31cCTEOCV3vX597dq1ufWG8p2U1KF8jS0KmYsXL/b6Tgow1ZWorv3xxx+RRyKw586dm/v1cPjw4bTKV199lcqN9HCk4zspyenTp2N48t5777V/JwWY6srvfYfffvutPBwJa9asyZ16WL16deoZHnvssXjb9Tsp4ddff921a1f0mTVrVl4ZmL6eeuqpFNsdk6DDw8O5Rw9RWURV8s8//5w6derIkSNdH46cO3dux44dHo7ArSaGDOk7I1euXClzomHlypW5Rzfz589/7bXXjh8/nn5b9KeffkprJdGe/mBX7g3cej788MMU8KdPn04ven1zbNGiRZs3b+74g10nTpyIf9Njl+Z3UoBb09NPP51SQHlE+uCDD+ZlI+rvpCRlXBMVx969e1seuwC3prlz56YRx+XLl+Pfjz76KBpn9vhOShKN6Q92tX8nBbiV7du3r2SEKB96PRw5f/78O++8s2bNGg9HgBnr169PqaHrr3WkP9i1YsUKD0eA/5k3b95ff/0VA5byN8dD+k5K+oNdAF0cPHgw/aGtXt9JAei0cePGvXv3vvHGG5unrXwmwIR59tln8xBl2spnAkwYiQMYWEkcJ06c+GpaOX/+fDryfCbAhCmJ44svvkgvpovy/f18JsCEkTiAgUkcwMCaiWN4ePj/pqrFixengwwSB0ya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" + b'\r\n')
            

@app.route('/liveCam02')
def liveCam02():
    return Response(getLiveCam02(), mimetype='multipart/x-mixed-replace; boundary=frame')

def getLiveCam02():
    while True:
        if imgQueue2.qsize() != 0:
            yield(b'--frame\r\n'
                  b'Content-Type: image/jpeg\r\n\r\n' + imgQueue2.get() + b'\r\n')
        else :
            yield(b'--frame\r\n'
                  b'Content-Type: image/png\r\n\r\n' + "iVBORw0KGgoAAAANSUhEUgAAAWgAAAHgCAIAAAAHZGA3AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABFLSURBVHhe7d3Zj1TF2wBgSOQC+BASA2gmMaCoiWDgQsSERNFIRIwGRTFG5BK4U7wTBTcQEsMybghIZFHjAhFBEJU/7nszVdSv7NN9phtnhee5IN116qxz3rffqjM9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABrR06dI333xzeHh4y5YtuQmgaebMmcuXL9+xY8e5c+eujzh27NjRo0fzYoDijjvuWL169a5du3799deUL5ILFy78M+Kuu+7KXYHb3OzZs5988sndu3dfunQpp4pKFB2HDh1Krzdt2pTXAW5P8+fPf+655/bs2fPnn3+mvFA7fvz4m2++uXTp0oceeujHH39MjYcPH84rA7eVxYsXR+EQKSCGHj/88EPKCEm0HDlyZPPmzXfffXfuPWPGwYMH06L074IFC/IC4JYXtcPWrVu/+eaba9euXbx4cSRRXP/uu+/i32jZv39/VB/NpLBy5crUs3jhhRfyMuCWlB6ObN++/ezZsznur1//+uuv04vTp0+///7769atmz17dl6hYXh4OHUuPvvss7wMuJXccccdjz766Ntvv/3LL7/kcL/hzz//jMbIHWfOnHn88cfzCj2sWbMmr1b5+++/582bl3sA092cOXOeeOKJlocjO3fujBIjvR11mjOqlePHj6fOHWJQkzsB09T8+fM3bNiwb9++L7/8Mkd2JYJ/27Zt9913X/RcuHDh1atXU/uKFSvS6r3EECbKkwsXLqT+tYMHD+ZOwPSyaNGil19+ec+ePel5x8WLF2MQkQI7Wo4ePfrKK6/UD0dCDF5ShwMHDuSmbmKtLVu2xHAmbbkWLVGqvPjii7krMC0sWbJk69atx44dizCOIcm1a9dSSKfHJfv379+4cWPXJ6ZDQ0Mlsyxbtiy3VtJ3UtLw5OTJk6lnEqVHVDQxQonqJvcGpriZM2c+/PDD27dvP3PmTA7lESl9XL58eXh4+JlnnpkzZ05eoZvdu3entaJIyU3dvpOSpF85j8QUaz355JMtj12AqSU9HHnrrbeaD0fCzz//nB6OxOtRf7ci6pQ07oii49577501a1bX76Qkn3/+eQxqokMcQF4fmOLSN0fefffd33//PYdy5fvvv9+5c+cjjzzywQcfpJazZ8+OGuEff/xx9IzcESOO9957r+tjl9hOFDVRgEQZklcDprg777xzw4YNn3zyydWrV7/99tsczTecOHFi27Zt999/f+q8bNmyvOD69fXr16fGXlatWnX8+PHYwpUrV5opIxZt3bp16dKluTcw9S1atOill146dOhQeYRRvlEWLUePHn311Vfvueee3PuGAwcOpD6nTp3qVSAsXrx48+bNR44cKWmo/M5obLn5nRRgqluyZMkbb7yRZjc7nDx58tNPP+31cCTEOCV3vX597dq1ufWG8p2U1KF8jS0KmYsXL/b6Tgow1ZWorv3xxx+RRyKw586dm/v1cPjw4bTKV199lcqN9HCk4zspyenTp2N48t5777V/JwWY6srvfYfffvutPBwJa9asyZ16WL16deoZHnvssXjb9Tsp4ddff921a1f0mTVrVl4ZmL6eeuqpFNsdk6DDw8O5Rw9RWURV8s8//5w6derIkSNdH46cO3dux44dHo7ArSaGDOk7I1euXClzomHlypW5Rzfz589/7bXXjh8/nn5b9KeffkprJdGe/mBX7g3cej788MMU8KdPn04ven1zbNGiRZs3b+74g10nTpyIf9Njl+Z3UoBb09NPP51SQHlE+uCDD+ZlI+rvpCRlXBMVx969e1seuwC3prlz56YRx+XLl+Pfjz76KBpn9vhOShKN6Q92tX8nBbiV7du3r2SEKB96PRw5f/78O++8s2bNGg9HgBnr169PqaHrr3WkP9i1YsUKD0eA/5k3b95ff/0VA5byN8dD+k5K+oNdAF0cPHgw/aGtXt9JAei0cePGvXv3vvHGG5unrXwmwIR59tln8xBl2spnAkwYiQMYWEkcJ06c+GpaOX/+fDryfCbAhCmJ44svvkgvpovy/f18JsCEkTiAgUkcwMCaiWN4ePj/pqrFixengwwSB0ya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" + b'\r\n')

            

@app.route('/getRobotData', methods=['POST'])
def getRobotData():
    if request.method == "POST":
        jsonData = request.get_json()
        setDataQueue.put(jsonData)
        print(jsonData)
    return ''



if __name__ == '__main__':
    imgQueue1 = Queue()
    imgQueue2 = Queue()
    robotDataQueue = Queue()
    setDataQueue = Queue()

    sock = SocketCli.SocketClient()
    socket_process = Process(target=sock.clientON, args=(imgQueue1, imgQueue2, robotDataQueue, setDataQueue))
    socket_process.start()
    app.run(host="127.0.0.1", port ="5050", debug=True)
    